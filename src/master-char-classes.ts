/**
 * @fileoverview Master Character Classes for Type-Safe Parsing
 * 
 * This module provides a comprehensive collection of character class type definitions
 * and runtime mappings for use with the type-safe `charClass` factory function.
 * It includes everything from basic ASCII characters to Unicode blocks, enabling
 * precise and type-safe character-level parsing.
 * 
 * The character classes are organized into logical categories:
 * - **Conceptual Unicode Properties**: Broad categories like letters, numbers, emojis
 * - **Core Digital & Alphabetic (ASCII)**: Digits, letters, hex characters
 * - **Logical Letter Groupings**: Vowels, consonants, Roman numerals
 * - **POSIX-Style & Composite Types**: Standard character classes like graph, print
 * - **Protocol & Language Specifics**: Characters for C identifiers, URLs, Base64
 * - **Punctuation & Symbols**: Sentence terminators, brackets, mathematical operators
 * - **Unicode Blocks**: Specific script blocks like Devanagari, Thai, Arabic
 * - **Whitespace Categories**: Different types of whitespace characters
 * 
 * Each character class type is a precise TypeScript union type, providing excellent
 * autocomplete and compile-time validation when used with the `charClass` function.
 * 
 * @example
 * ```typescript
 * import { charClass } from './parser';
 * import type { Digit, Alpha, Whitespace } from './master-char-classes';
 * 
 * // Parse a digit - result is typed as Digit ('0' | '1' | ... | '9')
 * const digitParser = charClass('Digit');
 * const digit: Digit = digitParser.parse('5'); // ✅ Type-safe
 * 
 * // Parse any letter - result is typed as Alpha
 * const letterParser = charClass('Alpha');
 * const letter: Alpha = letterParser.parse('A'); // ✅ Type-safe
 * ```
 * 
 * @example
 * ```typescript
 * // Using character classes in complex parsers
 * import { charClass, sequence } from './parser';
 * 
 * // Parse a C-style identifier: letter or underscore, followed by letters/digits/underscores
 * const identifier = sequence([
 *   charClass('CIdentifierStart'),
 *   charClass('CIdentifierPart').many()
 * ] as const, ([first, rest]) => first + rest.join(''));
 * 
 * identifier.parse('my_variable123'); // -> 'my_variable123'
 * ```
 * 
 * @generated This file was generated by: generate-master-char-classes.js
 * @see {@link ./parser.ts} for the charClass factory function
 * @see {@link https://www.unicode.org/charts/} for Unicode character information
 * @see {@link https://tools.ietf.org/html/rfc3986} for URL character specifications
 */

// ===================================================================
// Conceptual Unicode Property Types
// ===================================================================

/**
 * A conceptual type representing any Unicode letter character.
 * 
 * ⚠️ **Warning**: This is a conceptual type alias for `string` and is not an 
 * exhaustive union. It cannot provide compile-time character validation.
 * Use with parsers that support Unicode property escapes like `\p{L}`.
 * 
 * @example
 * ```typescript
 * // Use with regex parsers that support Unicode properties
 * const unicodeLetterParser = regex(/\p{L}/u);
 * unicodeLetterParser.parse('ñ'); // -> 'ñ' (Spanish letter)
 * unicodeLetterParser.parse('α'); // -> 'α' (Greek letter)
 * unicodeLetterParser.parse('漢'); // -> '漢' (Chinese character)
 * ```
 */
export type UnicodeLetter = string;

/**
 * A conceptual type representing any Unicode number character.
 * 
 * ⚠️ **Warning**: This is a conceptual type alias for `string` and is not an 
 * exhaustive union. Use with parsers that support Unicode property escapes like `\p{N}`.
 * 
 * @example
 * ```typescript
 * // Use with regex parsers that support Unicode properties
 * const unicodeNumberParser = regex(/\p{N}/u);
 * unicodeNumberParser.parse('5'); // -> '5' (ASCII digit)
 * unicodeNumberParser.parse('٥'); // -> '٥' (Arabic-Indic digit)
 * unicodeNumberParser.parse('五'); // -> '五' (Chinese numeral)
 * ```
 */
export type UnicodeNumber = string;

/**
 * A conceptual type representing any Unicode punctuation character.
 * 
 * ⚠️ **Warning**: This is a conceptual type alias for `string` and is not an 
 * exhaustive union. Use with parsers that support Unicode property escapes like `\p{P}`.
 * 
 * @example
 * ```typescript
 * // Use with regex parsers that support Unicode properties
 * const unicodePunctuationParser = regex(/\p{P}/u);
 * unicodePunctuationParser.parse('!'); // -> '!' (ASCII punctuation)
 * unicodePunctuationParser.parse('¿'); // -> '¿' (Inverted question mark)
 * unicodePunctuationParser.parse('«'); // -> '«' (Left-pointing guillemet)
 * ```
 */
export type UnicodePunctuation = string;

/**
 * A conceptual type representing emoji characters.
 * 
 * ⚠️ **Warning**: This is a conceptual type alias for `string` and is not an 
 * exhaustive union. Use with parsers that support Unicode property escapes like `\p{Emoji}`.
 * 
 * @example
 * ```typescript
 * // Use with regex parsers that support Unicode properties
 * const emojiParser = regex(/\p{Emoji}/u);
 * emojiParser.parse('😀'); // -> '😀' (Grinning face)
 * emojiParser.parse('🎉'); // -> '🎉' (Party popper)
 * emojiParser.parse('🚀'); // -> '🚀' (Rocket)
 * ```
 */
export type Emoji = string;

// --- Core Digital & Alphabetic (ASCII) ---

/** A binary digit ('0' or '1'). */
export type BinaryDigit = '0' | '1';

/** An octal digit ('0' through '7'). */
export type OctalDigit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7';

/** A standard decimal digit ('0' through '9'). Corresponds to POSIX `[:digit:]`. */
export type Digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';

/** A lowercase hexadecimal letter ('a' through 'f'). */
export type LowerHexLetter = 'a' | 'b' | 'c' | 'd' | 'e' | 'f';

/** An uppercase hexadecimal letter ('A' through 'F'). */
export type UpperHexLetter = 'A' | 'B' | 'C' | 'D' | 'E' | 'F';

/** Any hexadecimal letter, case-insensitive. */
export type HexLetter = LowerHexLetter | UpperHexLetter;

/** Any hexadecimal digit, case-insensitive. Corresponds to POSIX `[:xdigit:]`. */
export type HexDigit = Digit | HexLetter;

/** A lowercase ASCII letter ('a' through 'z'). Corresponds to POSIX `[:lower:]`. */
export type Lower = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z';

/** An uppercase ASCII letter ('A' through 'Z'). Corresponds to POSIX `[:upper:]`. */
export type Upper = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z';

/** Any ASCII letter, case-insensitive. Corresponds to POSIX `[:alpha:]`. */
export type Alpha = Lower | Upper;

/** Any ASCII alphanumeric character. Corresponds to POSIX `[:alnum:]`. */
export type Alnum = Alpha | Digit;

// --- Logical Letter Groupings (ASCII) ---

/** A lowercase ASCII vowel. */
export type VowelLower = 'a' | 'e' | 'i' | 'o' | 'u';

/** A lowercase ASCII consonant. */
export type ConsonantLower = 'b' | 'c' | 'd' | 'f' | 'g' | 'h' | 'j' | 'k' | 'l' | 'm' | 'n' | 'p' | 'q' | 'r' | 's' | 't' | 'v' | 'w' | 'x' | 'y' | 'z';

/** Any ASCII vowel, case-insensitive. */
export type Vowel = VowelLower | Upper;

/** Any ASCII consonant, case-insensitive. */
export type Consonant = ConsonantLower | Upper;

/** A character used in Roman numerals (case-sensitive uppercase). */
export type RomanNumeral = 'I' | 'V' | 'X' | 'L' | 'C' | 'D' | 'M';

// --- POSIX-Style & Composite Types ---

/** A broad "universe" of all printable ASCII characters, used for creating robust exclusion types. */
export type PrintableAscii = Alnum | AsciiPunctuation | " ";

/** A visible character that takes up space (excludes all whitespace). Corresponds to POSIX `[:graph:]`. */
export type Graph = Alnum | AsciiPunctuation;

/** A printable character (graphical characters plus space). Corresponds to POSIX `[:print:]`. */
export type Print = Graph | " ";

/** A control character from the common whitespace set. Corresponds to POSIX `[:cntrl:]`. */
export type Control = Exclude<Whitespace, ' '>;

// --- Protocol & Language Specifics ---

/** A character that can start an identifier in C-like languages. */
export type CIdentifierStart = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_';

/** A character that can be part of an identifier in C-like languages. */
export type CIdentifierPart = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';

/** An unreserved character in a URI, per RFC 3986. These do not require percent-encoding. */
export type UrlUnreserved = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '-' | '.' | '_' | '~';

/** A character from the standard Base64 alphabet. */
export type Base64Char = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '+' | '/';

/** A character from the URL-safe Base64 alphabet. */
export type Base64UrlSafeChar = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '-' | '_';

/** The padding character ('=') used in Base64 encoding. */
export type Base64Pad = '=';

// --- Punctuation & Symbols (ASCII) ---

/** A character that typically ends a sentence. */
export type SentenceTerminator = '.' | '!' | '?';

/** A character that typically separates clauses within a sentence. */
export type ClauseSeparator = ',' | ';' | ':';

/** A bracket, brace, or parenthesis character. */
export type Bracket = '[' | ']' | '{' | '}' | '(' | ')';

/** A single quote, double quote, or backtick. */
export type Quote = '\'' | '"' | '`';

/** A dash or underscore character. */
export type Dash = '-' | '_' | '—' | '–';

/** A common ASCII mathematical operator. */
export type AsciiMathOperator = '+' | '*' | '/' | '%' | '=';

/** All common ASCII punctuation. Corresponds to POSIX `[:punct:]`. */
export type AsciiPunctuation = '.' | '!' | '?' | ',' | ';' | ':' | '[' | ']' | '{' | '}' | '(' | ')' | '\'' | '"' | '`' | '-' | '_' | '—' | '–' | '+' | '*' | '/' | '%' | '=' | '<' | '>' | '&' | '|' | '^' | '#' | '@' | '$' | '\\' | '~';

// --- Unicode Blocks: Asian Scripts ---

/** Characters for Hindi, Marathi, and Nepali (Devanagari script). */
export type Devanagari = 'ऀ' | 'ँ' | 'ं' | 'ः' | 'ऄ' | 'अ' | 'आ' | 'इ' | 'ई' | 'उ' | 'ऊ' | 'ऋ' | 'ऌ' | 'ऍ' | 'ऎ' | 'ए' | 'ऐ' | 'ऑ' | 'ऒ' | 'ओ' | 'औ' | 'क' | 'ख' | 'ग' | 'घ' | 'ङ' | 'च' | 'छ' | 'ज' | 'झ' | 'ञ' | 'ट' | 'ठ' | 'ड' | 'ढ' | 'ण' | 'त' | 'थ' | 'द' | 'ध' | 'न' | 'ऩ' | 'प' | 'फ' | 'ब' | 'भ' | 'म' | 'य' | 'र' | 'ऱ' | 'ल' | 'ळ' | 'ऴ' | 'व' | 'श' | 'ष' | 'स' | 'ह' | 'ऺ' | 'ऻ' | '़' | 'ऽ' | 'ा' | 'ि' | 'ी' | 'ु' | 'ू' | 'ृ' | 'ॄ' | 'ॅ' | 'ॆ' | 'े' | 'ै' | 'ॉ' | 'ॊ' | 'ो' | 'ौ' | '्' | 'ॎ' | 'ॏ' | 'ॐ' | '॑' | '॒' | '॓' | '॔' | 'ॕ' | 'ॖ' | 'ॗ' | 'क़' | 'ख़' | 'ग़' | 'ज़' | 'ड़' | 'ढ़' | 'फ़' | 'य़' | 'ॠ' | 'ॡ' | 'ॢ' | 'ॣ' | '।' | '॥' | '०' | '१' | '२' | '३' | '४' | '५' | '६' | '७' | '८' | '९' | '॰' | 'ॱ' | 'ॲ' | 'ॳ' | 'ॴ' | 'ॵ' | 'ॶ' | 'ॷ' | 'ॸ' | 'ॹ' | 'ॺ' | 'ॻ' | 'ॼ' | 'ॽ' | 'ॾ' | 'ॿ';

/** Characters for the Thai language. */
export type Thai = '฀' | 'ก' | 'ข' | 'ฃ' | 'ค' | 'ฅ' | 'ฆ' | 'ง' | 'จ' | 'ฉ' | 'ช' | 'ซ' | 'ฌ' | 'ญ' | 'ฎ' | 'ฏ' | 'ฐ' | 'ฑ' | 'ฒ' | 'ณ' | 'ด' | 'ต' | 'ถ' | 'ท' | 'ธ' | 'น' | 'บ' | 'ป' | 'ผ' | 'ฝ' | 'พ' | 'ฟ' | 'ภ' | 'ม' | 'ย' | 'ร' | 'ฤ' | 'ล' | 'ฦ' | 'ว' | 'ศ' | 'ษ' | 'ส' | 'ห' | 'ฬ' | 'อ' | 'ฮ' | 'ฯ' | 'ะ' | 'ั' | 'า' | 'ำ' | 'ิ' | 'ี' | 'ึ' | 'ื' | 'ุ' | 'ู' | 'ฺ' | '฻' | '฼' | '฽' | '฾' | '฿' | 'เ' | 'แ' | 'โ' | 'ใ' | 'ไ' | 'ๅ' | 'ๆ' | '็' | '่' | '้' | '๊' | '๋' | '์' | 'ํ' | '๎' | '๏' | '๐' | '๑' | '๒' | '๓' | '๔' | '๕' | '๖' | '๗' | '๘' | '๙' | '๚' | '๛' | '๜' | '๝' | '๞' | '๟' | '๠' | '๡' | '๢' | '๣' | '๤' | '๥' | '๦' | '๧' | '๨' | '๩' | '๪' | '๫' | '๬' | '๭' | '๮' | '๯' | '๰' | '๱' | '๲' | '๳' | '๴' | '๵' | '๶' | '๷' | '๸' | '๹' | '๺' | '๻' | '๼' | '๽' | '๾' | '๿';

/** The Japanese Hiragana syllabary. */
export type Hiragana = '぀' | 'ぁ' | 'あ' | 'ぃ' | 'い' | 'ぅ' | 'う' | 'ぇ' | 'え' | 'ぉ' | 'お' | 'か' | 'が' | 'き' | 'ぎ' | 'く' | 'ぐ' | 'け' | 'げ' | 'こ' | 'ご' | 'さ' | 'ざ' | 'し' | 'じ' | 'す' | 'ず' | 'せ' | 'ぜ' | 'そ' | 'ぞ' | 'た' | 'だ' | 'ち' | 'ぢ' | 'っ' | 'つ' | 'づ' | 'て' | 'で' | 'と' | 'ど' | 'な' | 'に' | 'ぬ' | 'ね' | 'の' | 'は' | 'ば' | 'ぱ' | 'ひ' | 'び' | 'ぴ' | 'ふ' | 'ぶ' | 'ぷ' | 'へ' | 'べ' | 'ぺ' | 'ほ' | 'ぼ' | 'ぽ' | 'ま' | 'み' | 'む' | 'め' | 'も' | 'ゃ' | 'や' | 'ゅ' | 'ゆ' | 'ょ' | 'よ' | 'ら' | 'り' | 'る' | 'れ' | 'ろ' | 'ゎ' | 'わ' | 'ゐ' | 'ゑ' | 'を' | 'ん' | 'ゔ' | 'ゕ' | 'ゖ' | '゗' | '゘' | '゙' | '゚' | '゛' | '゜' | 'ゝ' | 'ゞ' | 'ゟ';

/** The Japanese Katakana syllabary. */
export type Katakana = '゠' | 'ァ' | 'ア' | 'ィ' | 'イ' | 'ゥ' | 'ウ' | 'ェ' | 'エ' | 'ォ' | 'オ' | 'カ' | 'ガ' | 'キ' | 'ギ' | 'ク' | 'グ' | 'ケ' | 'ゲ' | 'コ' | 'ゴ' | 'サ' | 'ザ' | 'シ' | 'ジ' | 'ス' | 'ズ' | 'セ' | 'ゼ' | 'ソ' | 'ゾ' | 'タ' | 'ダ' | 'チ' | 'ヂ' | 'ッ' | 'ツ' | 'ヅ' | 'テ' | 'デ' | 'ト' | 'ド' | 'ナ' | 'ニ' | 'ヌ' | 'ネ' | 'ノ' | 'ハ' | 'バ' | 'パ' | 'ヒ' | 'ビ' | 'ピ' | 'フ' | 'ブ' | 'プ' | 'ヘ' | 'ベ' | 'ペ' | 'ホ' | 'ボ' | 'ポ' | 'マ' | 'ミ' | 'ム' | 'メ' | 'モ' | 'ャ' | 'ヤ' | 'ュ' | 'ユ' | 'ョ' | 'ヨ' | 'ラ' | 'リ' | 'ル' | 'レ' | 'ロ' | 'ヮ' | 'ワ' | 'ヰ' | 'ヱ' | 'ヲ' | 'ン' | 'ヴ' | 'ヵ' | 'ヶ' | 'ヷ' | 'ヸ' | 'ヹ' | 'ヺ' | '・' | 'ー' | 'ヽ' | 'ヾ' | 'ヿ';

/** The vast block of pre-composed Korean Hangul syllables.
 * @warning This is a conceptual type alias for `string` because the character set is too large to be represented as a union type. Use it with a Unicode-aware regex (e.g., `new RegExp("\\p{Script=HangulSyllables}", "u")`). */
export type HangulSyllables = string;

/** The most common Chinese, Japanese, and Korean characters.
 * @warning This is a conceptual type alias for `string` because the character set is too large to be represented as a union type. Use it with a Unicode-aware regex (e.g., `new RegExp("\\p{Script=CjkUnifiedIdeographs}", "u")`). */
export type CjkUnifiedIdeographs = string;

// --- Unicode Blocks: European & Middle Eastern ---

/** The Latin-1 Supplement block, containing common accented letters like ä, é, ñ. */
export type LatinSupplement = 'À' | 'Á' | 'Â' | 'Ã' | 'Ä' | 'Å' | 'Æ' | 'Ç' | 'È' | 'É' | 'Ê' | 'Ë' | 'Ì' | 'Í' | 'Î' | 'Ï' | 'Ð' | 'Ñ' | 'Ò' | 'Ó' | 'Ô' | 'Õ' | 'Ö' | '×' | 'Ø' | 'Ù' | 'Ú' | 'Û' | 'Ü' | 'Ý' | 'Þ' | 'ß' | 'à' | 'á' | 'â' | 'ã' | 'ä' | 'å' | 'æ' | 'ç' | 'è' | 'é' | 'ê' | 'ë' | 'ì' | 'í' | 'î' | 'ï' | 'ð' | 'ñ' | 'ò' | 'ó' | 'ô' | 'õ' | 'ö' | '÷' | 'ø' | 'ù' | 'ú' | 'û' | 'ü' | 'ý' | 'þ' | 'ÿ';

/** The Latin Extended-A block for European languages like Polish, Czech, and Croatian. */
export type LatinExtendedA = 'Ā' | 'ā' | 'Ă' | 'ă' | 'Ą' | 'ą' | 'Ć' | 'ć' | 'Ĉ' | 'ĉ' | 'Ċ' | 'ċ' | 'Č' | 'č' | 'Ď' | 'ď' | 'Đ' | 'đ' | 'Ē' | 'ē' | 'Ĕ' | 'ĕ' | 'Ė' | 'ė' | 'Ę' | 'ę' | 'Ě' | 'ě' | 'Ĝ' | 'ĝ' | 'Ğ' | 'ğ' | 'Ġ' | 'ġ' | 'Ģ' | 'ģ' | 'Ĥ' | 'ĥ' | 'Ħ' | 'ħ' | 'Ĩ' | 'ĩ' | 'Ī' | 'ī' | 'Ĭ' | 'ĭ' | 'Į' | 'į' | 'İ' | 'ı' | 'Ĳ' | 'ĳ' | 'Ĵ' | 'ĵ' | 'Ķ' | 'ķ' | 'ĸ' | 'Ĺ' | 'ĺ' | 'Ļ' | 'ļ' | 'Ľ' | 'ľ' | 'Ŀ' | 'ŀ' | 'Ł' | 'ł' | 'Ń' | 'ń' | 'Ņ' | 'ņ' | 'Ň' | 'ň' | 'ŉ' | 'Ŋ' | 'ŋ' | 'Ō' | 'ō' | 'Ŏ' | 'ŏ' | 'Ő' | 'ő' | 'Œ' | 'œ' | 'Ŕ' | 'ŕ' | 'Ŗ' | 'ŗ' | 'Ř' | 'ř' | 'Ś' | 'ś' | 'Ŝ' | 'ŝ' | 'Ş' | 'ş' | 'Š' | 'š' | 'Ţ' | 'ţ' | 'Ť' | 'ť' | 'Ŧ' | 'ŧ' | 'Ũ' | 'ũ' | 'Ū' | 'ū' | 'Ŭ' | 'ŭ' | 'Ů' | 'ů' | 'Ű' | 'ű' | 'Ų' | 'ų' | 'Ŵ' | 'ŵ' | 'Ŷ' | 'ŷ' | 'Ÿ' | 'Ź' | 'ź' | 'Ż' | 'ż' | 'Ž' | 'ž' | 'ſ';

/** Characters for the Greek and Coptic scripts. */
export type GreekAndCoptic = 'Ͱ' | 'ͱ' | 'Ͳ' | 'ͳ' | 'ʹ' | '͵' | 'Ͷ' | 'ͷ' | '͸' | '͹' | 'ͺ' | 'ͻ' | 'ͼ' | 'ͽ' | ';' | 'Ϳ' | '΀' | '΁' | '΂' | '΃' | '΄' | '΅' | 'Ά' | '·' | 'Έ' | 'Ή' | 'Ί' | '΋' | 'Ό' | '΍' | 'Ύ' | 'Ώ' | 'ΐ' | 'Α' | 'Β' | 'Γ' | 'Δ' | 'Ε' | 'Ζ' | 'Η' | 'Θ' | 'Ι' | 'Κ' | 'Λ' | 'Μ' | 'Ν' | 'Ξ' | 'Ο' | 'Π' | 'Ρ' | '΢' | 'Σ' | 'Τ' | 'Υ' | 'Φ' | 'Χ' | 'Ψ' | 'Ω' | 'Ϊ' | 'Ϋ' | 'ά' | 'έ' | 'ή' | 'ί' | 'ΰ' | 'α' | 'β' | 'γ' | 'δ' | 'ε' | 'ζ' | 'η' | 'θ' | 'ι' | 'κ' | 'λ' | 'μ' | 'ν' | 'ξ' | 'ο' | 'π' | 'ρ' | 'ς' | 'σ' | 'τ' | 'υ' | 'φ' | 'χ' | 'ψ' | 'ω' | 'ϊ' | 'ϋ' | 'ό' | 'ύ' | 'ώ' | 'Ϗ' | 'ϐ' | 'ϑ' | 'ϒ' | 'ϓ' | 'ϔ' | 'ϕ' | 'ϖ' | 'ϗ' | 'Ϙ' | 'ϙ' | 'Ϛ' | 'ϛ' | 'Ϝ' | 'ϝ' | 'Ϟ' | 'ϟ' | 'Ϡ' | 'ϡ' | 'Ϣ' | 'ϣ' | 'Ϥ' | 'ϥ' | 'Ϧ' | 'ϧ' | 'Ϩ' | 'ϩ' | 'Ϫ' | 'ϫ' | 'Ϭ' | 'ϭ' | 'Ϯ' | 'ϯ' | 'ϰ' | 'ϱ' | 'ϲ' | 'ϳ' | 'ϴ' | 'ϵ' | '϶' | 'Ϸ' | 'ϸ' | 'Ϲ' | 'Ϻ' | 'ϻ' | 'ϼ' | 'Ͻ' | 'Ͼ' | 'Ͽ';

/** Characters for Cyrillic-based scripts like Russian, Bulgarian, and Serbian. */
export type Cyrillic = 'Ѐ' | 'Ё' | 'Ђ' | 'Ѓ' | 'Є' | 'Ѕ' | 'І' | 'Ї' | 'Ј' | 'Љ' | 'Њ' | 'Ћ' | 'Ќ' | 'Ѝ' | 'Ў' | 'Џ' | 'А' | 'Б' | 'В' | 'Г' | 'Д' | 'Е' | 'Ж' | 'З' | 'И' | 'Й' | 'К' | 'Л' | 'М' | 'Н' | 'О' | 'П' | 'Р' | 'С' | 'Т' | 'У' | 'Ф' | 'Х' | 'Ц' | 'Ч' | 'Ш' | 'Щ' | 'Ъ' | 'Ы' | 'Ь' | 'Э' | 'Ю' | 'Я' | 'а' | 'б' | 'в' | 'г' | 'д' | 'е' | 'ж' | 'з' | 'и' | 'й' | 'к' | 'л' | 'м' | 'н' | 'о' | 'п' | 'р' | 'с' | 'т' | 'у' | 'ф' | 'х' | 'ц' | 'ч' | 'ш' | 'щ' | 'ъ' | 'ы' | 'ь' | 'э' | 'ю' | 'я' | 'ѐ' | 'ё' | 'ђ' | 'ѓ' | 'є' | 'ѕ' | 'і' | 'ї' | 'ј' | 'љ' | 'њ' | 'ћ' | 'ќ' | 'ѝ' | 'ў' | 'џ' | 'Ѡ' | 'ѡ' | 'Ѣ' | 'ѣ' | 'Ѥ' | 'ѥ' | 'Ѧ' | 'ѧ' | 'Ѩ' | 'ѩ' | 'Ѫ' | 'ѫ' | 'Ѭ' | 'ѭ' | 'Ѯ' | 'ѯ' | 'Ѱ' | 'ѱ' | 'Ѳ' | 'ѳ' | 'Ѵ' | 'ѵ' | 'Ѷ' | 'ѷ' | 'Ѹ' | 'ѹ' | 'Ѻ' | 'ѻ' | 'Ѽ' | 'ѽ' | 'Ѿ' | 'ѿ' | 'Ҁ' | 'ҁ' | '҂' | '҃' | '҄' | '҅' | '҆' | '҇' | '҈' | '҉' | 'Ҋ' | 'ҋ' | 'Ҍ' | 'ҍ' | 'Ҏ' | 'ҏ' | 'Ґ' | 'ґ' | 'Ғ' | 'ғ' | 'Ҕ' | 'ҕ' | 'Җ' | 'җ' | 'Ҙ' | 'ҙ' | 'Қ' | 'қ' | 'Ҝ' | 'ҝ' | 'Ҟ' | 'ҟ' | 'Ҡ' | 'ҡ' | 'Ң' | 'ң' | 'Ҥ' | 'ҥ' | 'Ҧ' | 'ҧ' | 'Ҩ' | 'ҩ' | 'Ҫ' | 'ҫ' | 'Ҭ' | 'ҭ' | 'Ү' | 'ү' | 'Ұ' | 'ұ' | 'Ҳ' | 'ҳ' | 'Ҵ' | 'ҵ' | 'Ҷ' | 'ҷ' | 'Ҹ' | 'ҹ' | 'Һ' | 'һ' | 'Ҽ' | 'ҽ' | 'Ҿ' | 'ҿ' | 'Ӏ' | 'Ӂ' | 'ӂ' | 'Ӄ' | 'ӄ' | 'Ӆ' | 'ӆ' | 'Ӈ' | 'ӈ' | 'Ӊ' | 'ӊ' | 'Ӌ' | 'ӌ' | 'Ӎ' | 'ӎ' | 'ӏ' | 'Ӑ' | 'ӑ' | 'Ӓ' | 'ӓ' | 'Ӕ' | 'ӕ' | 'Ӗ' | 'ӗ' | 'Ә' | 'ә' | 'Ӛ' | 'ӛ' | 'Ӝ' | 'ӝ' | 'Ӟ' | 'ӟ' | 'Ӡ' | 'ӡ' | 'Ӣ' | 'ӣ' | 'Ӥ' | 'ӥ' | 'Ӧ' | 'ӧ' | 'Ө' | 'ө' | 'Ӫ' | 'ӫ' | 'Ӭ' | 'ӭ' | 'Ӯ' | 'ӯ' | 'Ӱ' | 'ӱ' | 'Ӳ' | 'ӳ' | 'Ӵ' | 'ӵ' | 'Ӷ' | 'ӷ' | 'Ӹ' | 'ӹ' | 'Ӻ' | 'ӻ' | 'Ӽ' | 'ӽ' | 'Ӿ' | 'ӿ' | 'Ԁ' | 'ԁ' | 'Ԃ' | 'ԃ' | 'Ԅ' | 'ԅ' | 'Ԇ' | 'ԇ' | 'Ԉ' | 'ԉ' | 'Ԋ' | 'ԋ' | 'Ԍ' | 'ԍ' | 'Ԏ' | 'ԏ' | 'Ԑ' | 'ԑ' | 'Ԓ' | 'ԓ' | 'Ԕ' | 'ԕ' | 'Ԗ' | 'ԗ' | 'Ԙ' | 'ԙ' | 'Ԛ' | 'ԛ' | 'Ԝ' | 'ԝ' | 'Ԟ' | 'ԟ' | 'Ԡ' | 'ԡ' | 'Ԣ' | 'ԣ' | 'Ԥ' | 'ԥ' | 'Ԧ' | 'ԧ' | 'Ԩ' | 'ԩ' | 'Ԫ' | 'ԫ' | 'Ԭ' | 'ԭ' | 'Ԯ' | 'ԯ';

/** Characters for the Hebrew script. */
export type Hebrew = '֐' | '֑' | '֒' | '֓' | '֔' | '֕' | '֖' | '֗' | '֘' | '֙' | '֚' | '֛' | '֜' | '֝' | '֞' | '֟' | '֠' | '֡' | '֢' | '֣' | '֤' | '֥' | '֦' | '֧' | '֨' | '֩' | '֪' | '֫' | '֬' | '֭' | '֮' | '֯' | 'ְ' | 'ֱ' | 'ֲ' | 'ֳ' | 'ִ' | 'ֵ' | 'ֶ' | 'ַ' | 'ָ' | 'ֹ' | 'ֺ' | 'ֻ' | 'ּ' | 'ֽ' | '־' | 'ֿ' | '׀' | 'ׁ' | 'ׂ' | '׃' | 'ׄ' | 'ׅ' | '׆' | 'ׇ' | '׈' | '׉' | '׊' | '׋' | '׌' | '׍' | '׎' | '׏' | 'א' | 'ב' | 'ג' | 'ד' | 'ה' | 'ו' | 'ז' | 'ח' | 'ט' | 'י' | 'ך' | 'כ' | 'ל' | 'ם' | 'מ' | 'ן' | 'נ' | 'ס' | 'ע' | 'ף' | 'פ' | 'ץ' | 'צ' | 'ק' | 'ר' | 'ש' | 'ת' | '׫' | '׬' | '׭' | '׮' | 'ׯ' | 'װ' | 'ױ' | 'ײ' | '׳' | '״' | '׵' | '׶' | '׷' | '׸' | '׹' | '׺' | '׻' | '׼' | '׽' | '׾' | '׿';

/** Characters for scripts like Arabic, Persian, and Urdu. */
export type Arabic = '؀' | '؁' | '؂' | '؃' | '؄' | '؅' | '؆' | '؇' | '؈' | '؉' | '؊' | '؋' | '،' | '؍' | '؎' | '؏' | 'ؐ' | 'ؑ' | 'ؒ' | 'ؓ' | 'ؔ' | 'ؕ' | 'ؖ' | 'ؗ' | 'ؘ' | 'ؙ' | 'ؚ' | '؛' | '؜' | '؝' | '؞' | '؟' | 'ؠ' | 'ء' | 'آ' | 'أ' | 'ؤ' | 'إ' | 'ئ' | 'ا' | 'ب' | 'ة' | 'ت' | 'ث' | 'ج' | 'ح' | 'خ' | 'د' | 'ذ' | 'ر' | 'ز' | 'س' | 'ش' | 'ص' | 'ض' | 'ط' | 'ظ' | 'ع' | 'غ' | 'ػ' | 'ؼ' | 'ؽ' | 'ؾ' | 'ؿ' | 'ـ' | 'ف' | 'ق' | 'ك' | 'ل' | 'م' | 'ن' | 'ه' | 'و' | 'ى' | 'ي' | 'ً' | 'ٌ' | 'ٍ' | 'َ' | 'ُ' | 'ِ' | 'ّ' | 'ْ' | 'ٓ' | 'ٔ' | 'ٕ' | 'ٖ' | 'ٗ' | '٘' | 'ٙ' | 'ٚ' | 'ٛ' | 'ٜ' | 'ٝ' | 'ٞ' | 'ٟ' | '٠' | '١' | '٢' | '٣' | '٤' | '٥' | '٦' | '٧' | '٨' | '٩' | '٪' | '٫' | '٬' | '٭' | 'ٮ' | 'ٯ' | 'ٰ' | 'ٱ' | 'ٲ' | 'ٳ' | 'ٴ' | 'ٵ' | 'ٶ' | 'ٷ' | 'ٸ' | 'ٹ' | 'ٺ' | 'ٻ' | 'ټ' | 'ٽ' | 'پ' | 'ٿ' | 'ڀ' | 'ځ' | 'ڂ' | 'ڃ' | 'ڄ' | 'څ' | 'چ' | 'ڇ' | 'ڈ' | 'ډ' | 'ڊ' | 'ڋ' | 'ڌ' | 'ڍ' | 'ڎ' | 'ڏ' | 'ڐ' | 'ڑ' | 'ڒ' | 'ړ' | 'ڔ' | 'ڕ' | 'ږ' | 'ڗ' | 'ژ' | 'ڙ' | 'ښ' | 'ڛ' | 'ڜ' | 'ڝ' | 'ڞ' | 'ڟ' | 'ڠ' | 'ڡ' | 'ڢ' | 'ڣ' | 'ڤ' | 'ڥ' | 'ڦ' | 'ڧ' | 'ڨ' | 'ک' | 'ڪ' | 'ګ' | 'ڬ' | 'ڭ' | 'ڮ' | 'گ' | 'ڰ' | 'ڱ' | 'ڲ' | 'ڳ' | 'ڴ' | 'ڵ' | 'ڶ' | 'ڷ' | 'ڸ' | 'ڹ' | 'ں' | 'ڻ' | 'ڼ' | 'ڽ' | 'ھ' | 'ڿ' | 'ۀ' | 'ہ' | 'ۂ' | 'ۃ' | 'ۄ' | 'ۅ' | 'ۆ' | 'ۇ' | 'ۈ' | 'ۉ' | 'ۊ' | 'ۋ' | 'ی' | 'ۍ' | 'ێ' | 'ۏ' | 'ې' | 'ۑ' | 'ے' | 'ۓ' | '۔' | 'ە' | 'ۖ' | 'ۗ' | 'ۘ' | 'ۙ' | 'ۚ' | 'ۛ' | 'ۜ' | '۝' | '۞' | '۟' | '۠' | 'ۡ' | 'ۢ' | 'ۣ' | 'ۤ' | 'ۥ' | 'ۦ' | 'ۧ' | 'ۨ' | '۩' | '۪' | '۫' | '۬' | 'ۭ' | 'ۮ' | 'ۯ' | '۰' | '۱' | '۲' | '۳' | '۴' | '۵' | '۶' | '۷' | '۸' | '۹' | 'ۺ' | 'ۻ' | 'ۼ' | '۽' | '۾' | 'ۿ' | 'ݐ' | 'ݑ' | 'ݒ' | 'ݓ' | 'ݔ' | 'ݕ' | 'ݖ' | 'ݗ' | 'ݘ' | 'ݙ' | 'ݚ' | 'ݛ' | 'ݜ' | 'ݝ' | 'ݞ' | 'ݟ' | 'ݠ' | 'ݡ' | 'ݢ' | 'ݣ' | 'ݤ' | 'ݥ' | 'ݦ' | 'ݧ' | 'ݨ' | 'ݩ' | 'ݪ' | 'ݫ' | 'ݬ' | 'ݭ' | 'ݮ' | 'ݯ' | 'ݰ' | 'ݱ' | 'ݲ' | 'ݳ' | 'ݴ' | 'ݵ' | 'ݶ' | 'ݷ' | 'ݸ' | 'ݹ' | 'ݺ' | 'ݻ' | 'ݼ' | 'ݽ' | 'ݾ' | 'ݿ';

// --- Unicode Blocks: Symbols & Punctuation ---

/** A block of general-purpose punctuation, including various dashes, quotes, and the ellipsis. */
export type GeneralPunctuation = ' ' | ' ' | ' ' | ' ' | ' ' | ' ' | ' ' | ' ' | ' ' | ' ' | ' ' | '​' | '‌' | '‍' | '‎' | '‏' | '‐' | '‑' | '‒' | '–' | '—' | '―' | '‖' | '‗' | '‘' | '’' | '‚' | '‛' | '“' | '”' | '„' | '‟' | '†' | '‡' | '•' | '‣' | '․' | '‥' | '…' | '‧' | ' ' | ' ' | '‪' | '‫' | '‬' | '‭' | '‮' | ' ' | '‰' | '‱' | '′' | '″' | '‴' | '‵' | '‶' | '‷' | '‸' | '‹' | '›' | '※' | '‼' | '‽' | '‾' | '‿' | '⁀' | '⁁' | '⁂' | '⁃' | '⁄' | '⁅' | '⁆' | '⁇' | '⁈' | '⁉' | '⁊' | '⁋' | '⁌' | '⁍' | '⁎' | '⁏' | '⁐' | '⁑' | '⁒' | '⁓' | '⁔' | '⁕' | '⁖' | '⁗' | '⁘' | '⁙' | '⁚' | '⁛' | '⁜' | '⁝' | '⁞' | ' ' | '⁠' | '⁡' | '⁢' | '⁣' | '⁤' | '⁥' | '⁦' | '⁧' | '⁨' | '⁩' | '⁪' | '⁫' | '⁬' | '⁭' | '⁮' | '⁯';

/** A block containing currency symbols like the Euro, Rupee, and Yen. */
export type CurrencySymbols = '₠' | '₡' | '₢' | '₣' | '₤' | '₥' | '₦' | '₧' | '₨' | '₩' | '₪' | '₫' | '€' | '₭' | '₮' | '₯' | '₰' | '₱' | '₲' | '₳' | '₴' | '₵' | '₶' | '₷' | '₸' | '₹' | '₺' | '₻' | '₼' | '₽' | '₾' | '₿' | '⃀' | '⃁' | '⃂' | '⃃' | '⃄' | '⃅' | '⃆' | '⃇' | '⃈' | '⃉' | '⃊' | '⃋' | '⃌' | '⃍' | '⃎' | '⃏';

/** Characters for creating text-based boxes and borders in terminals. */
export type BoxDrawing = '─' | '━' | '│' | '┃' | '┄' | '┅' | '┆' | '┇' | '┈' | '┉' | '┊' | '┋' | '┌' | '┍' | '┎' | '┏' | '┐' | '┑' | '┒' | '┓' | '└' | '┕' | '┖' | '┗' | '┘' | '┙' | '┚' | '┛' | '├' | '┝' | '┞' | '┟' | '┠' | '┡' | '┢' | '┣' | '┤' | '┥' | '┦' | '┧' | '┨' | '┩' | '┪' | '┫' | '┬' | '┭' | '┮' | '┯' | '┰' | '┱' | '┲' | '┳' | '┴' | '┵' | '┶' | '┷' | '┸' | '┹' | '┺' | '┻' | '┼' | '┽' | '┾' | '┿' | '╀' | '╁' | '╂' | '╃' | '╄' | '╅' | '╆' | '╇' | '╈' | '╉' | '╊' | '╋' | '╌' | '╍' | '╎' | '╏' | '═' | '║' | '╒' | '╓' | '╔' | '╕' | '╖' | '╗' | '╘' | '╙' | '╚' | '╛' | '╜' | '╝' | '╞' | '╟' | '╠' | '╡' | '╢' | '╣' | '╤' | '╥' | '╦' | '╧' | '╨' | '╩' | '╪' | '╫' | '╬' | '╭' | '╮' | '╯' | '╰' | '╱' | '╲' | '╳' | '╴' | '╵' | '╶' | '╷' | '╸' | '╹' | '╺' | '╻' | '╼' | '╽' | '╾' | '╿';

/** A block of geometric shapes like circles, squares, and triangles. */
export type GeometricShapes = '■' | '□' | '▢' | '▣' | '▤' | '▥' | '▦' | '▧' | '▨' | '▩' | '▪' | '▫' | '▬' | '▭' | '▮' | '▯' | '▰' | '▱' | '▲' | '△' | '▴' | '▵' | '▶' | '▷' | '▸' | '▹' | '►' | '▻' | '▼' | '▽' | '▾' | '▿' | '◀' | '◁' | '◂' | '◃' | '◄' | '◅' | '◆' | '◇' | '◈' | '◉' | '◊' | '○' | '◌' | '◍' | '◎' | '●' | '◐' | '◑' | '◒' | '◓' | '◔' | '◕' | '◖' | '◗' | '◘' | '◙' | '◚' | '◛' | '◜' | '◝' | '◞' | '◟' | '◠' | '◡' | '◢' | '◣' | '◤' | '◥' | '◦' | '◧' | '◨' | '◩' | '◪' | '◫' | '◬' | '◭' | '◮' | '◯' | '◰' | '◱' | '◲' | '◳' | '◴' | '◵' | '◶' | '◷' | '◸' | '◹' | '◺' | '◻' | '◼' | '◽' | '◾' | '◿';

/** A block of various arrow symbols. */
export type Arrows = '←' | '↑' | '→' | '↓' | '↔' | '↕' | '↖' | '↗' | '↘' | '↙' | '↚' | '↛' | '↜' | '↝' | '↞' | '↟' | '↠' | '↡' | '↢' | '↣' | '↤' | '↥' | '↦' | '↧' | '↨' | '↩' | '↪' | '↫' | '↬' | '↭' | '↮' | '↯' | '↰' | '↱' | '↲' | '↳' | '↴' | '↵' | '↶' | '↷' | '↸' | '↹' | '↺' | '↻' | '↼' | '↽' | '↾' | '↿' | '⇀' | '⇁' | '⇂' | '⇃' | '⇄' | '⇅' | '⇆' | '⇇' | '⇈' | '⇉' | '⇊' | '⇋' | '⇌' | '⇍' | '⇎' | '⇏' | '⇐' | '⇑' | '⇒' | '⇓' | '⇔' | '⇕' | '⇖' | '⇗' | '⇘' | '⇙' | '⇚' | '⇛' | '⇜' | '⇝' | '⇞' | '⇟' | '⇠' | '⇡' | '⇢' | '⇣' | '⇤' | '⇥' | '⇦' | '⇧' | '⇨' | '⇩' | '⇪' | '⇫' | '⇬' | '⇭' | '⇮' | '⇯' | '⇰' | '⇱' | '⇲' | '⇳' | '⇴' | '⇵' | '⇶' | '⇷' | '⇸' | '⇹' | '⇺' | '⇻' | '⇼' | '⇽' | '⇾' | '⇿';

/** A block of advanced mathematical operators beyond basic ASCII. */
export type MathematicalOperators = '∀' | '∁' | '∂' | '∃' | '∄' | '∅' | '∆' | '∇' | '∈' | '∉' | '∊' | '∋' | '∌' | '∍' | '∎' | '∏' | '∐' | '∑' | '−' | '∓' | '∔' | '∕' | '∖' | '∗' | '∘' | '∙' | '√' | '∛' | '∜' | '∝' | '∞' | '∟' | '∠' | '∡' | '∢' | '∣' | '∤' | '∥' | '∦' | '∧' | '∨' | '∩' | '∪' | '∫' | '∬' | '∭' | '∮' | '∯' | '∰' | '∱' | '∲' | '∳' | '∴' | '∵' | '∶' | '∷' | '∸' | '∹' | '∺' | '∻' | '∼' | '∽' | '∾' | '∿' | '≀' | '≁' | '≂' | '≃' | '≄' | '≅' | '≆' | '≇' | '≈' | '≉' | '≊' | '≋' | '≌' | '≍' | '≎' | '≏' | '≐' | '≑' | '≒' | '≓' | '≔' | '≕' | '≖' | '≗' | '≘' | '≙' | '≚' | '≛' | '≜' | '≝' | '≞' | '≟' | '≠' | '≡' | '≢' | '≣' | '≤' | '≥' | '≦' | '≧' | '≨' | '≩' | '≪' | '≫' | '≬' | '≭' | '≮' | '≯' | '≰' | '≱' | '≲' | '≳' | '≴' | '≵' | '≶' | '≷' | '≸' | '≹' | '≺' | '≻' | '≼' | '≽' | '≾' | '≿' | '⊀' | '⊁' | '⊂' | '⊃' | '⊄' | '⊅' | '⊆' | '⊇' | '⊈' | '⊉' | '⊊' | '⊋' | '⊌' | '⊍' | '⊎' | '⊏' | '⊐' | '⊑' | '⊒' | '⊓' | '⊔' | '⊕' | '⊖' | '⊗' | '⊘' | '⊙' | '⊚' | '⊛' | '⊜' | '⊝' | '⊞' | '⊟' | '⊠' | '⊡' | '⊢' | '⊣' | '⊤' | '⊥' | '⊦' | '⊧' | '⊨' | '⊩' | '⊪' | '⊫' | '⊬' | '⊭' | '⊮' | '⊯' | '⊰' | '⊱' | '⊲' | '⊳' | '⊴' | '⊵' | '⊶' | '⊷' | '⊸' | '⊹' | '⊺' | '⊻' | '⊼' | '⊽' | '⊾' | '⊿' | '⋀' | '⋁' | '⋂' | '⋃' | '⋄' | '⋅' | '⋆' | '⋇' | '⋈' | '⋉' | '⋊' | '⋋' | '⋌' | '⋍' | '⋎' | '⋏' | '⋐' | '⋑' | '⋒' | '⋓' | '⋔' | '⋕' | '⋖' | '⋗' | '⋘' | '⋙' | '⋚' | '⋛' | '⋜' | '⋝' | '⋞' | '⋟' | '⋠' | '⋡' | '⋢' | '⋣' | '⋤' | '⋥' | '⋦' | '⋧' | '⋨' | '⋩' | '⋪' | '⋫' | '⋬' | '⋭' | '⋮' | '⋯' | '⋰' | '⋱' | '⋲' | '⋳' | '⋴' | '⋵' | '⋶' | '⋷' | '⋸' | '⋹' | '⋺' | '⋻' | '⋼' | '⋽' | '⋾' | '⋿';

// --- Whitespace Categories ---

/** A space or a tab. Corresponds to POSIX `[:blank:]`. */
export type Blank = ' ' | '\t';

/** A line-ending character (newline or carriage return). */
export type LineEnd = '\n' | '\r';

/** Any common whitespace character. Corresponds to POSIX `[:space:]`. */
export type Whitespace = ' ' | '\t' | '\n' | '\r' | '\f' | '\v';

// ===================================================================
// Mappings for the Type-Safe charClass Factory Function
// ===================================================================

/**
 * A union type of all available character class names.
 * 
 * This type is used by the `charClass` function to provide autocomplete
 * and type safety when specifying which character class to parse.
 * Each name corresponds to a precise character set type.
 * 
 * @example
 * ```typescript
 * // TypeScript will suggest all available class names
 * const parser = charClass('Digit');     // ✅ Valid
 * const parser2 = charClass('Alpha');    // ✅ Valid  
 * const parser3 = charClass('Invalid');  // ❌ Type error
 * ```
 */
export type CharClassName = 'BinaryDigit' | 'OctalDigit' | 'Digit' | 'LowerHexLetter' | 'UpperHexLetter' | 'Lower' | 'Upper' | 'VowelLower' | 'ConsonantLower' | 'RomanNumeral' | 'SentenceTerminator' | 'ClauseSeparator' | 'Bracket' | 'Quote' | 'Dash' | 'AsciiMathOperator' | 'AsciiPunctuation' | 'Blank' | 'LineEnd' | 'Whitespace' | 'CIdentifierStart' | 'CIdentifierPart' | 'UrlUnreserved' | 'Base64Char' | 'Base64UrlSafeChar' | 'LatinSupplement' | 'LatinExtendedA' | 'GreekAndCoptic' | 'Cyrillic' | 'Hebrew' | 'Arabic' | 'Devanagari' | 'Thai' | 'Hiragana' | 'Katakana' | 'GeneralPunctuation' | 'CurrencySymbols' | 'BoxDrawing' | 'GeometricShapes' | 'Arrows' | 'MathematicalOperators';
 
/**
 * A complete mapping from character class names to their corresponding TypeScript types.
 * 
 * This interface enables the `charClass` function to provide precise return types
 * based on the input character class name. When you call `charClass('Digit')`,
 * TypeScript knows the result will be of type `Digit`.
 * 
 * The mapping ensures compile-time type safety while maintaining runtime flexibility.
 * Each character class name maps to a union type of the actual characters in that class.
 * 
 * @example
 * ```typescript
 * // The charClass function uses this mapping internally
 * function charClass<K extends CharClassName>(name: K): Parser<CharClassTypeMap[K]> {
 *   // Implementation that leverages both type and runtime information
 * }
 * 
 * // Results are precisely typed
 * const digitParser = charClass('Digit');        // Parser<Digit>
 * const letterParser = charClass('Alpha');       // Parser<Alpha>
 * const punctParser = charClass('Bracket');      // Parser<Bracket>
 * ```
 * 
 * @template K - The character class name key
 */
export interface CharClassTypeMap {
  BinaryDigit: BinaryDigit;
  OctalDigit: OctalDigit;
  Digit: Digit;
  LowerHexLetter: LowerHexLetter;
  UpperHexLetter: UpperHexLetter;
  Lower: Lower;
  Upper: Upper;
  VowelLower: VowelLower;
  ConsonantLower: ConsonantLower;
  RomanNumeral: RomanNumeral;
  SentenceTerminator: SentenceTerminator;
  ClauseSeparator: ClauseSeparator;
  Bracket: Bracket;
  Quote: Quote;
  Dash: Dash;
  AsciiMathOperator: AsciiMathOperator;
  AsciiPunctuation: AsciiPunctuation;
  Blank: Blank;
  LineEnd: LineEnd;
  Whitespace: Whitespace;
  CIdentifierStart: CIdentifierStart;
  CIdentifierPart: CIdentifierPart;
  UrlUnreserved: UrlUnreserved;
  Base64Char: Base64Char;
  Base64UrlSafeChar: Base64UrlSafeChar;
  LatinSupplement: LatinSupplement;
  LatinExtendedA: LatinExtendedA;
  GreekAndCoptic: GreekAndCoptic;
  Cyrillic: Cyrillic;
  Hebrew: Hebrew;
  Arabic: Arabic;
  Devanagari: Devanagari;
  Thai: Thai;
  Hiragana: Hiragana;
  Katakana: Katakana;
  GeneralPunctuation: GeneralPunctuation;
  CurrencySymbols: CurrencySymbols;
  BoxDrawing: BoxDrawing;
  GeometricShapes: GeometricShapes;
  Arrows: Arrows;
  MathematicalOperators: MathematicalOperators;
}

/**
 * Runtime mapping from character class names to their actual character strings.
 * 
 * This constant provides the runtime character data that the `charClass` function
 * uses to create actual parsers. Each character class name maps to a string
 * containing all the characters in that class.
 * 
 * The strings are optimized for performance with the most common characters
 * first where applicable. Special characters are properly escaped where necessary.
 * 
 * @example
 * ```typescript
 * // Access character strings directly
 * console.log(CHAR_CLASS_STRINGS.Digit);        // "0123456789"
 * console.log(CHAR_CLASS_STRINGS.Lower);        // "abcdefghijklmnopqrstuvwxyz"
 * console.log(CHAR_CLASS_STRINGS.Bracket);      // "[]{}()"
 * 
 * // Used internally by charClass
 * function charClass<K extends CharClassName>(name: K): Parser<CharClassTypeMap[K]> {
 *   const chars = CHAR_CLASS_STRINGS[name];
 *   return anyOf(chars); // Create parser from character string
 * }
 * ```
 */
export const CHAR_CLASS_STRINGS: { [K in CharClassName]: string } = {
  BinaryDigit: '01',
  OctalDigit: '01234567',
  Digit: '0123456789',
  LowerHexLetter: 'abcdef',
  UpperHexLetter: 'ABCDEF',
  Lower: 'abcdefghijklmnopqrstuvwxyz',
  Upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
  VowelLower: 'aeiou',
  ConsonantLower: 'bcdfghjklmnpqrstvwxyz',
  RomanNumeral: 'IVXLCDM',
  SentenceTerminator: '.!?',
  ClauseSeparator: ',;:',
  Bracket: '[]{}()',
  Quote: '\'"`',
  Dash: '-_—–',
  AsciiMathOperator: '+*/%=',
  AsciiPunctuation: '.!?,;:[]{}()\'"`-_—–+*/%=<>&|^#@$&\\~',
  Blank: ' \t',
  LineEnd: '\n\r',
  Whitespace: ' \t\n\r\f\v',
  CIdentifierStart: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_',
  CIdentifierPart: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789',
  UrlUnreserved: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~',
  Base64Char: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/',
  Base64UrlSafeChar: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_',
  LatinSupplement: 'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ',
  LatinExtendedA: 'ĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ',
  GreekAndCoptic: 'ͰͱͲͳʹ͵Ͷͷ͸͹ͺͻͼͽ;Ϳ΀΁΂΃΄΅Ά·ΈΉΊ΋Ό΍ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ΢ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώϏϐϑϒϓϔϕϖϗϘϙϚϛϜϝϞϟϠϡϢϣϤϥϦϧϨϩϪϫϬϭϮϯϰϱϲϳϴϵ϶ϷϸϹϺϻϼϽϾϿ',
  Cyrillic: 'ЀЁЂЃЄЅІЇЈЉЊЋЌЍЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяѐёђѓєѕіїјљњћќѝўџѠѡѢѣѤѥѦѧѨѩѪѫѬѭѮѯѰѱѲѳѴѵѶѷѸѹѺѻѼѽѾѿҀҁ҂҃҄҅҆҇҈҉ҊҋҌҍҎҏҐґҒғҔҕҖҗҘҙҚқҜҝҞҟҠҡҢңҤҥҦҧҨҩҪҫҬҭҮүҰұҲҳҴҵҶҷҸҹҺһҼҽҾҿӀӁӂӃӄӅӆӇӈӉӊӋӌӍӎӏӐӑӒӓӔӕӖӗӘәӚӛӜӝӞӟӠӡӢӣӤӥӦӧӨөӪӫӬӭӮӯӰӱӲӳӴӵӶӷӸӹӺӻӼӽӾӿԀԁԂԃԄԅԆԇԈԉԊԋԌԍԎԏԐԑԒԓԔԕԖԗԘԙԚԛԜԝԞԟԠԡԢԣԤԥԦԧԨԩԪԫԬԭԮԯ',
  Hebrew: '֐ְֱֲֳִֵֶַָֹֺֻּֽ֑֖֛֢֣֤֥֦֧֪֚֭֮֒֓֔֕֗֘֙֜֝֞֟֠֡֨֩֫֬֯־ֿ׀ׁׂ׃ׅׄ׆ׇ׈׉׊׋׌׍׎׏אבגדהוזחטיךכלםמןנסעףפץצקרשת׫׬׭׮ׯװױײ׳״׵׶׷׸׹׺׻׼׽׾׿',
  Arabic: '؀؁؂؃؄؅؆؇؈؉؊؋،؍؎؏ؘؙؚؐؑؒؓؔؕؖؗ؛؜؝؞؟ؠءآأؤإئابةتثجحخدذرزسشصضطظعغػؼؽؾؿـفقكلمنهوىيًٌٍَُِّْٕٖٜٟٓٔٗ٘ٙٚٛٝٞ٠١٢٣٤٥٦٧٨٩٪٫٬٭ٮٯٰٱٲٳٴٵٶٷٸٹٺٻټٽپٿڀځڂڃڄڅچڇڈډڊڋڌڍڎڏڐڑڒړڔڕږڗژڙښڛڜڝڞڟڠڡڢڣڤڥڦڧڨکڪګڬڭڮگڰڱڲڳڴڵڶڷڸڹںڻڼڽھڿۀہۂۃۄۅۆۇۈۉۊۋیۍێۏېۑےۓ۔ەۖۗۘۙۚۛۜ۝۞ۣ۟۠ۡۢۤۥۦۧۨ۩۪ۭ۫۬ۮۯ۰۱۲۳۴۵۶۷۸۹ۺۻۼ۽۾ۿݐݑݒݓݔݕݖݗݘݙݚݛݜݝݞݟݠݡݢݣݤݥݦݧݨݩݪݫݬݭݮݯݰݱݲݳݴݵݶݷݸݹݺݻݼݽݾݿ',
  Devanagari: 'ऀँंःऄअआइईउऊऋऌऍऎएऐऑऒओऔकखगघङचछजझञटठडढणतथदधनऩपफबभमयरऱलळऴवशषसहऺऻ़ऽािीुूृॄॅॆेैॉॊोौ्ॎॏॐ॒॑॓॔ॕॖॗक़ख़ग़ज़ड़ढ़फ़य़ॠॡॢॣ।॥०१२३४५६७८९॰ॱॲॳॴॵॶॷॸॹॺॻॼॽॾॿ',
  Thai: '฀กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู฻฼฽฾฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛๜๝๞๟๠๡๢๣๤๥๦๧๨๩๪๫๬๭๮๯๰๱๲๳๴๵๶๷๸๹๺๻๼๽๾๿',
  Hiragana: '぀ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをんゔゕゖ゗゘゙゚゛゜ゝゞゟ',
  Katakana: '゠ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺ・ーヽヾヿ',
  GeneralPunctuation: '           ​‌‍‎‏‐‑‒–—―‖‗‘’‚‛“”„‟†‡•‣․‥…‧  ‪‫‬‭‮ ‰‱′″‴‵‶‷‸‹›※‼‽‾‿⁀⁁⁂⁃⁄⁅⁆⁇⁈⁉⁊⁋⁌⁍⁎⁏⁐⁑⁒⁓⁔⁕⁖⁗⁘⁙⁚⁛⁜⁝⁞ ⁠⁡⁢⁣⁤⁥⁦⁧⁨⁩⁪⁫⁬⁭⁮⁯',
  CurrencySymbols: '₠₡₢₣₤₥₦₧₨₩₪₫€₭₮₯₰₱₲₳₴₵₶₷₸₹₺₻₼₽₾₿⃀⃁⃂⃃⃄⃅⃆⃇⃈⃉⃊⃋⃌⃍⃎⃏',
  BoxDrawing: '─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋╌╍╎╏═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳╴╵╶╷╸╹╺╻╼╽╾╿',
  GeometricShapes: '■□▢▣▤▥▦▧▨▩▪▫▬▭▮▯▰▱▲△▴▵▶▷▸▹►▻▼▽▾▿◀◁◂◃◄◅◆◇◈◉◊○◌◍◎●◐◑◒◓◔◕◖◗◘◙◚◛◜◝◞◟◠◡◢◣◤◥◦◧◨◩◪◫◬◭◮◯◰◱◲◳◴◵◶◷◸◹◺◻◼◽◾◿',
  Arrows: '←↑→↓↔↕↖↗↘↙↚↛↜↝↞↟↠↡↢↣↤↥↦↧↨↩↪↫↬↭↮↯↰↱↲↳↴↵↶↷↸↹↺↻↼↽↾↿⇀⇁⇂⇃⇄⇅⇆⇇⇈⇉⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇚⇛⇜⇝⇞⇟⇠⇡⇢⇣⇤⇥⇦⇧⇨⇩⇪⇫⇬⇭⇮⇯⇰⇱⇲⇳⇴⇵⇶⇷⇸⇹⇺⇻⇼⇽⇾⇿',
  MathematicalOperators: '∀∁∂∃∄∅∆∇∈∉∊∋∌∍∎∏∐∑−∓∔∕∖∗∘∙√∛∜∝∞∟∠∡∢∣∤∥∦∧∨∩∪∫∬∭∮∯∰∱∲∳∴∵∶∷∸∹∺∻∼∽∾∿≀≁≂≃≄≅≆≇≈≉≊≋≌≍≎≏≐≑≒≓≔≕≖≗≘≙≚≛≜≝≞≟≠≡≢≣≤≥≦≧≨≩≪≫≬≭≮≯≰≱≲≳≴≵≶≷≸≹≺≻≼≽≾≿⊀⊁⊂⊃⊄⊅⊆⊇⊈⊉⊊⊋⊌⊍⊎⊏⊐⊑⊒⊓⊔⊕⊖⊗⊘⊙⊚⊛⊜⊝⊞⊟⊠⊡⊢⊣⊤⊥⊦⊧⊨⊩⊪⊫⊬⊭⊮⊯⊰⊱⊲⊳⊴⊵⊶⊷⊸⊹⊺⊻⊼⊽⊾⊿⋀⋁⋂⋃⋄⋅⋆⋇⋈⋉⋊⋋⋌⋍⋎⋏⋐⋑⋒⋓⋔⋕⋖⋗⋘⋙⋚⋛⋜⋝⋞⋟⋠⋡⋢⋣⋤⋥⋦⋧⋨⋩⋪⋫⋬⋭⋮⋯⋰⋱⋲⋳⋴⋵⋶⋷⋸⋹⋺⋻⋼⋽⋾⋿',
};